<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="logoPictureBox.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAJYAAADICAIAAACF548yAAAABGdBTUEAALGPC/xhBQAAAAlwSFlzAAAO
        vAAADrwBlbxySQAABZpJREFUeF7t3f9PVXUcx/H+s747xFLJFWYmi2KpM+wHdK1sLskVFazgB2Qzf2nN
        rLRcFhpmaZnOyRchwC9wFST5moDR5dsF+2x8Yva5nHv48TzfvN57/njePz3G5d577jnnoYfzLit0IsQn
        QnwixCdCfCLEJ0J8IsQnQnwixCdCfCLEJ0J8IsQnQnwixCdCfCLEJ0J8IsQnQnwixCdCfCLEJ0J8IsQn
        QnwixCdCfCLEJ0J8IsQnQnwixCdCfCLEJ0J8IsQnQnwixCdCfCLEJ0J8IsQnQnwixCdCfCLEJ0J8IsQn
        QnwixCdCfCLEJ0J8IsQnQnz2CV/a2r7/w5tHjg58f2q4ura3dNe14AB6xgk/O9x/P2uaWu451+BIbmYJ
        V61r6uic8GhLTXlFKliBZpbw5OkRbxUx4+Oz6zdeCbaI2SSsqunxUDnnp7N3g0ViNgnPXxzzSjlndnY+
        WCRmk3BwaNorxU3xNvz7GoOEqwuavc8y5p338G9qbP4V9v055YniZvMrfwS7uGwS/vLrXU+Uc9LpuWCR
        mE3Ct9/t9ko559jxwWCRmE1C1xdfD3ioiOnpnXxkdbhFzCyh68zZyJfToeHpsjevB8dDs0zo+uiTW9PT
        c97tv6lvGMnf0Bwcyc04oevJtU3bXu+squmpO9S3e8+NDS9Y+FLtwewTmk+E+ESIT4T4RIhPhPhEiE+E
        +ESIT4T4RIhPhPhEiE+E+CwTFha1llekPj/S/813Q1U1Pa+VXQ0OsJFZwsrqnqmsk73fnhh6/KnG4Eh6
        Ngmra3s9WtZcahwPDqZnkPC5La0zM/NebKk58GlfsILOIGHtwdveKmIGBqeDFXQGCet/jLkszU3+M/r5
        U4LLfWXowmzd2RlscTNI2H0z7aGip3i7LtROcMu5Jmbzy/irYRYzSDg8MuOhoufZF1uDLW4GCcfHZz1U
        9Kzf2BJscTNIODkZfimTPXpHmugymVyf6xfG0tds1gifeLrRK0WPjbskLGaN0P2T81DR4/5ZBlvorBFu
        Km7zUNFzp38q2EJnjbBkR4eHip6u7nSwhc4a4c7d1zxU9Fxp+zvYQmeN8I29NzxU9Fy4NBZsobNGuO/9
        lIeKHhu3XlvMGmFldfwN9E7UDwdb6KwR1h3q81DRc/irgWALnTXC2NvNuKnTDy+S3A+n4k/Zf/DxrWAL
        nTXC3y6Meqjo2bOvK9hCZ43QfebzUNHjPjsGW+isEXZ1x//qomRHR7CFzhrhnf74X11sKm4LttBZI1xp
        p+xd1gizr6PInryCpmALnTXC+fgz9vcfW2PqyhhThMs5ZZ/JmDpl7zJF6F4hPVT0uFfaYIueCPGJEJ8I
        8YkQnynCVWtFyC/2c6EIk146HfPtjAiT3sRExltFzNycPtonu1hCN8ZuPbMSCdcYelSMyxrh6Fj8yaaC
        5009MMYa4XIeAVtYZOcqbZc1wmXdK4H/5NAHs0aYWmF3LHFZI7x6/R8PFT2W7hvkskbY1h7/I8RSWzcm
        tUbY2HzPQ0WPmeeHLmSN8PeLYx4qesreEmGC+/lc/OPQRZjoTp6OvyxGhImuviGeUJfFJLrlEJZXpIIt
        dCuRsKJK1xcmOBHiO3p80ENFz9793cEWOmuElTXxd7woelXfkSa40l3xd38KVuhZI3Q1nPnLWy01NQd6
        g+PpGSRcV9jSlVr6lNO586PBwQYySLjQl8f+dwOaTGa+9uDt4BgbmSV0PZrfWLy93b3/3FJi6jR9kGXC
        FZII8YkQnwjxiRCfCPGJEJ8I8YkQnwjxiRCfCPGJEJ8I8YkQnwjxiRCfCPGJEJ8I8YkQnwjxiRCfCPGJ
        EJ8I8YkQnwjxiRCfCPGJEJ8I8YkQnwjxiRCfCPGJEJ8I8YkQnwjxiRCfCPGJEJ8I8YkQnwjxiRCfCPGJ
        EJ8I4eVd/hdNgPJMN1jDpQAAAABJRU5ErkJggg==
</value>
  </data>
  <data name="textBoxDescription.Text" xml:space="preserve">
    <value>Таблиця з 100 клітинок у які можна вводити вирази з цілих чисел, дужок, операцій + = * / ^ div(a,b) mod(a,b) inc(a) dec(a), та посилань на інші клітинки. Посилання на клітини складаються із букви стовпчика і цифри рядка, стовпчики позначаються великими літерами латинського алфавіту зліва направо, а рядки від 0 до 9 зверху вниз.</value>
  </data>
</root>